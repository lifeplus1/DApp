{
  "metadata": {
    "testSuite": "Phase 5.1 Week 2 Security Testing",
    "network": "hardhat",
    "timestamp": "2025-09-01T04:17:45.171Z"
  },
  "summary": {
    "totalTests": 14,
    "passed": 4,
    "failed": 10,
    "partial": 0,
    "passRate": 29,
    "timestamp": "2025-09-01T04:17:45.171Z"
  },
  "testResults": {
    "accessControl": [
      {
        "test": "Non-owner strategy addition",
        "result": "PASS",
        "message": "Correctly reverted"
      },
      {
        "test": "Non-authorized emergency pause",
        "result": "PASS",
        "message": "Correctly reverted"
      },
      {
        "test": "Owner admin actions",
        "result": "FAIL",
        "issue": "portfolioManager.connect(...).setRebalanceThreshold is not a function"
      },
      {
        "test": "Ownership transfer",
        "result": "FAIL",
        "issue": "portfolioManager.connect(...).acceptOwnership is not a function"
      }
    ],
    "emergencyControls": [
      {
        "test": "Emergency pause",
        "result": "FAIL",
        "issue": "portfolioManager.connect(...).deposit is not a function"
      },
      {
        "test": "Emergency withdrawal",
        "result": "FAIL",
        "issue": "portfolioManager.balanceOf is not a function"
      },
      {
        "test": "Strategy pause",
        "result": "FAIL",
        "issue": "VM Exception while processing transaction: reverted with reason string 'Not authorized for emergency operations'"
      }
    ],
    "financialSecurity": [
      {
        "test": "Integer overflow protection",
        "result": "PASS",
        "message": "Overflow prevented"
      },
      {
        "test": "Zero deposit handling",
        "result": "PASS",
        "message": "Zero deposits prevented"
      },
      {
        "test": "Balance consistency",
        "result": "FAIL",
        "issue": "portfolioManager.connect(...).deposit is not a function"
      },
      {
        "test": "Fee calculation",
        "result": "FAIL",
        "issue": "portfolioManager.totalAssets is not a function"
      }
    ],
    "integration": [
      {
        "test": "Strategy interaction",
        "result": "FAIL",
        "issue": "portfolioManager.connect(...).deposit is not a function"
      },
      {
        "test": "Reentrancy protection",
        "result": "FAIL",
        "issue": "portfolioManager.balanceOf is not a function"
      },
      {
        "test": "Gas limit protection",
        "result": "FAIL",
        "issue": "Cannot read properties of undefined (reading 'estimateGas')"
      }
    ],
    "summary": {
      "totalTests": 14,
      "passed": 4,
      "failed": 10,
      "partial": 0,
      "passRate": 29,
      "timestamp": "2025-09-01T04:17:45.171Z"
    }
  },
  "recommendations": [
    {
      "priority": "CRITICAL",
      "title": "Address failed security tests",
      "description": "Review and fix all failed security tests before mainnet deployment"
    },
    {
      "priority": "MEDIUM",
      "title": "Implement additional reentrancy testing",
      "description": "Deploy malicious contract for comprehensive reentrancy testing"
    },
    {
      "priority": "LOW",
      "title": "Add gas optimization testing",
      "description": "Implement automated gas usage regression testing"
    }
  ]
}